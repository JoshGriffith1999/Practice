Linux Commands
_________________________________________________________________________________
whoami:				tells you who you currently logged in as
pwd:				tells current working directory
cd <directory>:			change directory
ls:				lists all files and folder in a directory
man <command>:			See manual for provided command
sudo <command>:			run command as super user
sh ./<filename>:		run a shell script
chmod <filePermission><file:	Change file & directory permissions for user,group,other
chown <newOwner> <file/dir>:	Change file(s) or directory(s) to newOwner
ps -ef:				show running process(es)
ps -ef | grep <process>:	find in running process the provided process
mkdir <directory>:		make directory(folder) with provided name
cp <name1> <name2>:		make copy of file/directory name1 with name2

APT Package Manger Commands
-------------------------------------------------------------------------------
apt-get install<package>:	install package from apt package manager	
apt-get update;			refresh apt package manager repository list with most up-to-date versions
apt-get upgrade:		tell apt to install lastest version of all installed packages

Git Commands
_________________________________________________________________________________
git config --global user.name "Sam Smith": config author name
git config --global user.email sam@example.com: config author email
git init: create new repository

//clone, commit, push
git clone /path/@some:	clone repository
git add <file name>:	commit file name
git add -a OR git add.:	commit all files edits
git commit -m "":	commit files to repository
git push origin master: push to  master branch
git status:		list files in the commit or are not in commit

//branches
git checkout -b <branch Name>:	create new branch
git checkout <branch Name>:	switch to branch
git branch:			list all branches
git put origin <branch name>:	push to branch

//update from remote repository
git pull:			grab updates in repository
git merge <branch name>:	To merge a different branch into your active branch:
git diff:			View all the merge conflicts: View the conflicts against the base file:

Preview changes, before merging: View all the merge conflicts: View the conflicts against the base file:
git diff --base <filename>:		View all the merge conflicts: View the conflicts against the base file:
git diff <sourcebranch> <targetbranch>: View all the merge conflicts: View the conflicts against the base file:

//undo changes
git checkout -- <filename>:	If mess up, can replace the changes in your working tree with the last content in head Changes already added to the index, as well as new files, will be kept.
git fetch origin:		Instead, to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it, do this:
git reset --hard origin/master: Instead, to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it, do this:
